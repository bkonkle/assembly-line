{"version":3,"sources":["../../src/app/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import {Base} from 'yeoman-generator'\nimport {exec} from 'child_process'\nimport chalk from 'chalk'\nimport mkdirp from 'mkdirp'\nimport path from 'path'\n\nexport default class AssemblyLine extends Base {\n\n  initializing() {\n    const done = this.async()\n\n    this.log(chalk.blue(`\n    ___                         _     _         _     _\n   / _ \\\\                       | |   | |       | |   (_)\n  / /_\\\\ \\\\___ ___  ___ _ __ ___ | |__ | |_   _  | |    _ _ __   ___\n  |  _  / __/ __|/ _ \\\\ '_ \\` _ \\\\| '_ \\\\| | | | | | |   | | '_ \\\\ / _ \\\\\n  | | | \\\\__ \\\\__ \\\\  __/ | | | | | |_) | | |_| | | |___| | | | |  __/\n  \\\\_| |_/___/___/\\\\___|_| |_| |_|_.__/|_|\\\\__, | \\\\_____/_|_| |_|\\\\___|\n                                         __/ |\n                                        |___/\n    `))\n\n    exec('git config --get remote.origin.url', (err, stdout) => {\n      if (stdout.toString()) {\n        this.config.set('repoType', 'git')\n        this.config.set('repoUrl', stdout.split('\\n')[0])\n      }\n      done()\n    })\n  }\n\n  prompting() {\n    const done = this.async()\n\n    this.prompt([{\n      type: 'input',\n      name: 'name',\n      message: 'Your project name:',\n      default: path.basename(this.destinationRoot()),\n    }, {\n      type: 'input',\n      name: 'version',\n      message: 'The project\\'s initial version number:',\n      default: '1.0.0',\n    }, {\n      type: 'input',\n      name: 'description',\n      message: 'The project\\'s description:',\n    }, {\n      type: 'input',\n      name: 'repoType',\n      message: 'The repository type:',\n      default: this.config.get('repoType'),\n      store: true,\n    }, {\n      type: 'input',\n      name: 'repoUrl',\n      message: 'The repository url:',\n      default: this.config.get('repoUrl'),\n    }, {\n      type: 'input',\n      name: 'author',\n      message: 'The project\\'s author:',\n      store: true,\n    }, {\n      type: 'input',\n      name: 'keywords',\n      message: 'Comma-separated project keywords:',\n      filter: keywords => keywords ? keywords.split(',').map(keyword => keyword.trim()) : [],\n    }, {\n      type: 'confirm',\n      name: 'react',\n      message: 'Will the project use React?',\n      default: true,\n    }], answers => {\n      this.config.set(answers)\n      done()\n    })\n  }\n\n  configuring() {\n    this.fs.copyTpl(this.templatePath('**/*'), this.destinationRoot(), this.config.getAll())\n    this.fs.copyTpl(this.templatePath('**/.*'), this.destinationRoot(), this.config.getAll())\n    this.fs.copy(this.templatePath('../static/**/*'), this.destinationRoot())\n    this.fs.copy(this.templatePath('../static/**/.*'), this.destinationRoot())\n  }\n\n  writing() {\n    mkdirp.sync(this.destinationPath('src'))\n    mkdirp.sync(this.destinationPath('lib'))\n    mkdirp.sync(this.destinationPath('dist'))\n    mkdirp.sync(this.destinationPath('test'))\n  }\n\n  install() {\n    // this.npmInstall()\n  }\n\n}\n"]}